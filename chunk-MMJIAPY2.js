import{a as c,b as g,q as p,r as m}from"./chunk-B7B36LJ4.js";import{G as n,X as o,_ as f,da as u,l as h,m as l,r as s}from"./chunk-LCXVR3EY.js";var b=class d{constructor(r,e){this.http=r;this.authService=e;this.loadGraphedRnfIds()}apiUrlResultsGraphicsByRoomQuestionUser=p.apiUrl+"grafic-chart/getGraficByRoomQuestionUser";apiUrlAddGrafica=p.apiUrl+"grafic-chart/add-grafica";apiUrlUpdateGrafica=p.apiUrl+"grafic-chart/update-grafica";againQuestionSource=new h;againQuestion$=this.againQuestionSource.asObservable();graphedRnfIdsSubject=new l([]);graphedRnfIds$=this.graphedRnfIdsSubject.asObservable();getGraficByRoomAndQuestionAndUser(r,e,a){let t=this.authService.getUserData(),v=new c({Authorization:`Bearer ${t?.access_token}`});return this.http.post(this.apiUrlResultsGraphicsByRoomQuestionUser,{game_room_id:r,question_id:e,user_id:a},{headers:v}).pipe(o(i=>i.data),n(i=>(console.error("SERVICE | Error al obtener gr\xE1ficos:",i),s(()=>new Error(i.error.message||"SERVICE | Ocurri\xF3 un error. Intenta m\xE1s tarde.")))))}createGraphics(r){let e=this.authService.getUserData(),a=new c({Authorization:`Bearer ${e?.access_token}`});return this.http.post(this.apiUrlAddGrafica,r,{headers:a}).pipe(o(t=>(console.log("SERVICE | Gr\xE1fica creada con \xE9xito",t),t)),n(t=>s(()=>new Error(t.error.message||"SERVICE | Ocurri\xF3 un error. Intenta m\xE1s tarde."))))}updateGraphics(r){let e=this.authService.getUserData(),a=new c({Authorization:`Bearer ${e?.access_token}`});return console.log("SERVICE | Datos a actualizar:",r),this.http.put(this.apiUrlUpdateGrafica,r,{headers:a}).pipe(o(t=>(console.log("SERVICE | Gr\xE1fica actualizada con \xE9xito",t),t)),n(t=>s(()=>new Error(t.error.message||"SERVICE | Ocurri\xF3 un error al actualizar la gr\xE1fica."))))}loadGraphedRnfIds(){let r=localStorage.getItem("graphedRnfIds");r&&this.graphedRnfIdsSubject.next(JSON.parse(r))}saveGraphedRnfIds(r){localStorage.setItem("graphedRnfIds",JSON.stringify(r))}getGraphedRnfIds(){return this.graphedRnfIdsSubject.getValue()}isRnfGraphed(r){return this.getGraphedRnfIds().includes(r)}markRnfAsGraphed(r){let e=this.getGraphedRnfIds();if(!e.includes(r)){let a=[...e,r];this.graphedRnfIdsSubject.next(a),this.saveGraphedRnfIds(a)}}static \u0275fac=function(e){return new(e||d)(u(g),u(m))};static \u0275prov=f({token:d,factory:d.\u0275fac,providedIn:"root"})};export{b as a};
